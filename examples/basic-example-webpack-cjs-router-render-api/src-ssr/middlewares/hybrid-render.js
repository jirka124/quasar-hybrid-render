/*
  THIS FILE IS AUTO-GENERATED by hybrid-render extension of Quasar.
  You should not temper with this file, unless really needed.
*/

import { ssrMiddleware } from "quasar/wrappers";

import {
  RenderCSR,
  RenderSSG,
  RenderISR,
  RenderSWR,
} from "../../src-hr/Render.cjs";
import { handleError } from "../../src-hr/utils.cjs";
import { config } from "../../src-hr/config.cjs";

export default ssrMiddleware(({ app, resolve, render, serve }) => {
  // process hybrid routing (ISR, SSG, CSR)
  app.get(resolve.urlPath("*"), async (req, res, next) => {
    try {
      const hybridConf = config();

      // default to SSR and skip SSR as its performed by Quasar SSR
      if (!req.hybridRender || !req.hybridRender.route) return next();

      if (!req.hybridRender.route.type || req.hybridRender.route.type === "ssr")
        return next();

      if (req.hybridRender.route.type === "ssg" && hybridConf.SSG.actAsSSR)
        return next();
      if (req.hybridRender.route.type === "isr" && hybridConf.ISR.actAsSSR)
        return next();
      if (req.hybridRender.route.type === "swr" && hybridConf.ISR.actAsSSR)
        return next();

      const hr = req.hybridRender;
      const route = hr.route;

      hr.initialUrl = req.url;

      let renderer = null;
      const renderOptions = {
        SSRContext: { req, res },
        middleParams: { resolve, render, serve },
      };

      // choose appropriate renderer and run it to serve request
      if (hr.renderer) renderer = hr.renderer;
      else if (route.type === "csr") renderer = new RenderCSR(renderOptions);
      else if (route.type === "ssg") renderer = new RenderSSG(renderOptions);
      else if (route.type === "isr") renderer = new RenderISR(renderOptions);
      else if (route.type === "swr") renderer = new RenderSWR(renderOptions);

      if (!renderer) next();
      else await renderer.run();
    } catch (err) {
      // if is dev, serve an quasar error
      if (process.env.DEV && !res.headersSent) {
        serve.error({
          err,
          req,
          res,
        });
      }

      // propagate error to error handler
      next(handleError(err));
    }
  });

  // Reset initial URL for the purpose of SSR render resolvement
  app.get(resolve.urlPath("*"), async (req, res, next) => {
    if (req && req.hybridRender && req.hybridRender.initialUrl)
      req.url = req.hybridRender.initialUrl;
    next();
  });
});
